from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from database import get_stats, add_api_key
# from utils import reload_api_keys, api_keys_cache
from admin_keyboards import get_admin_main_menu
from utils import reload_api_keys
from keyboards import get_main_menu
from admin_states import AdminState  # ‚Üê –î–û–ë–ê–í–¨ –ò–ú–ü–û–†–¢
import asyncio
from database import get_all_api_keys  # ‚Üê –≠–¢–û –î–û–ë–ê–í–¨

router = Router()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def get_admin_ids():
    import os
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    if not admin_ids_str:
        return []
    return list(map(int, admin_ids_str.split(",")))


# üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á" ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á")
async def start_add_key(message: Message, state: FSMContext):
    if message.from_user.id not in get_admin_ids():
        return
    await message.answer("üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ API-–∫–ª—é—á:")
    await state.set_state(AdminState.waiting_for_api_key)


# üëá –õ–æ–≤–∏–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(StateFilter(AdminState.waiting_for_api_key))
async def process_api_key(message: Message, state: FSMContext):
    if message.from_user.id not in get_admin_ids():
        await state.clear()
        return

    new_key = message.text.strip()

    if len(new_key) < 10:
        await message.answer("‚ùå –ö–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.")
        return

    try:
        await add_api_key(new_key)
        await message.answer(f"‚úÖ –ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ü–ï–†–í–´–ô –≤ —Å–ø–∏—Å–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n–ö–ª—é—á: `{new_key[:6]}...`", parse_mode="Markdown")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        global api_keys_cache
        api_keys_cache = await get_all_api_keys()
        print(f"[INFO] –ö—ç—à –∫–ª—é—á–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å {len(api_keys_cache)} –∫–ª—é—á(–µ–π).")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {str(e)}")
        print(f"[ERROR] addkey: {e}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await message.answer("üîê –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=get_admin_main_menu())


# üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–¢–µ—Å—Ç –∫–ª—é—á–µ–π"
@router.message(F.text == "–¢–µ—Å—Ç –∫–ª—é—á–µ–π")
async def cmd_testkey_button(message: Message):
    if message.from_user.id not in get_admin_ids():
        return
    try:
        await reload_api_keys()
        from utils import api_keys_cache  # ‚Üê –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ü–û–°–õ–ï reload
        keys = api_keys_cache
        if not keys:
            await message.answer("‚ùå –ö–ª—é—á–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á¬ª")
            return
        first_key_sample = keys[0][:10] + "..." if keys else "–Ω–µ—Ç –∫–ª—é—á–µ–π"
        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}\n–ü—Ä–∏–º–µ—Ä: `{first_key_sample}`", parse_mode="Markdown")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await message.answer(error_msg)
        print(f"[TESTKEY ERROR] {error_msg}")


# üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats_from_menu(message: Message):
    if message.from_user.id not in get_admin_ids():
        return

    stats = await get_stats()
    if not stats:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
        return

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n"
    for row in stats[:10]:
        text += f"ID: {row['user_id']} | –ó–∞–ø—Ä–æ—Å–æ–≤: {row['request_count']} | –ü–æ—Å–ª–µ–¥–Ω–∏–π: {row['last_request']}\n"

    await message.answer(text, reply_markup=get_admin_main_menu())


# üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    if message.from_user.id not in get_admin_ids():
        return
    await state.clear()  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu(message.from_user.id))


# üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞"
@router.message(F.text == "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞")
async def open_admin_menu(message: Message):
    if message.from_user.id not in get_admin_ids():
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üîê –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=get_admin_main_menu())


# üëá –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã /addkey (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@router.message(Command("addkey"))
async def cmd_addkey(message: Message):
    if message.from_user.id not in get_admin_ids():
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addkey –≤–∞—à_–∫–ª—é—á_—Å—é–¥–∞")
        return

    new_key = args[1].strip()

    if len(new_key) < 10:
        await message.answer("‚ùå –ö–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.")
        return

    try:
        await add_api_key(new_key)
        await message.answer(f"‚úÖ –ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ü–ï–†–í–´–ô –≤ —Å–ø–∏—Å–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n–ö–ª—é—á: `{new_key[:6]}...`", parse_mode="Markdown")

        global api_keys_cache
        api_keys_cache = await get_all_api_keys()
        print(f"[INFO] –ö—ç—à –∫–ª—é—á–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å {len(api_keys_cache)} –∫–ª—é—á(–µ–π).")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {str(e)}")
        print(f"[ERROR] addkey: {e}")