from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database import update_context, get_context
from prompts import CHARACTER_PROMPTS, DEFAULT_CHARACTER
from keyboards import get_main_menu
import asyncio

router = Router()


def get_character_inline_kb():
    buttons = [
        [InlineKeyboardButton(text="üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data="char_neutral")],
        [InlineKeyboardButton(text="ü§î –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π", callback_data="char_philosophical")],
        [InlineKeyboardButton(text="üòÑ –Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data="char_humorous")],
        [InlineKeyboardButton(text="üòÑ –¢–≤–æ—è –ø–æ–¥—Ä—É–≥–∞", callback_data="char_girl")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data.startswith("char_"))
async def set_character(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    char_key = callback.data.split("_")[1]  # "neutral", "philosophical", "humorous"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –ë–î
    await update_context(user_id, [], character=char_key)  # –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ–º

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context, name, gender, character = await get_context(user_id)

    await callback.answer()
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {get_character_name(char_key)}\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ.",
        reply_markup=None
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
    if name and gender:
        greeting = f"–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {name}! üê±\n–û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º —Å–µ–≥–æ–¥–Ω—è?"
    else:
        greeting = (
            "–ü—Ä–∏–≤–µ—Ç! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–µ–¥–¥–∏ üêª ‚Äî —è —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å.\n\n"
            "–ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ò, –µ—Å–ª–∏ –Ω–µ —Å–µ–∫—Ä–µ—Ç, —Ç—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞? "
            "–ú–Ω–µ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ–±—ã –ª—É—á—à–µ —Ç–µ–±—è —Å–ª—É—à–∞—Ç—å."
        )

    await callback.message.answer(greeting, reply_markup=get_main_menu(user_id))


def get_character_name(key: str) -> str:
    names = {
        "neutral": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
        "philosophical": "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π",
        "humorous": "–Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
        "girl": "–¢–≤–æ—è –ø–æ–¥—Ä—É–≥–∞"
    }
    return names.get(key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")


@router.message(F.text == "–•–∞—Ä–∞–∫—Ç–µ—Ä")
async def choose_character(message: Message):
    await message.answer(
        "üé≠ –í—ã–±–µ—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π:",
        reply_markup=get_character_inline_kb()
    )