from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ChatAction
from aiogram.exceptions import TelegramBadRequest

from character_handlers import get_character_inline_kb
from database import (
    get_context, update_context, clear_context, increment_stats,
    get_stats, get_all_api_keys, add_api_key
)
from aiogram.enums import ChatAction
from utils import get_ai_response, reload_api_keys, api_keys_cache
from keyboards import get_main_menu
import asyncio
import os
import re

router = Router()

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []


def extract_name_and_gender(text: str):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏ –ø–æ–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ—Ä–∞–∑—ã: "–†–æ–º–∞, –º—É–∂—á–∏–Ω–∞", "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω—è", "–Ø ‚Äî –°–∞—à–∞, –ø–æ–ª –∂–µ–Ω—Å–∫–∏–π" –∏ —Ç.–ø.
    """
    text = text.strip().lower()
    name = None
    gender = None

    male_keywords = ["–º—É–∂—á–∏–Ω–∞", "–º—É–∂—Å–∫–æ–π", "–ø–∞—Ä–µ–Ω—å", "–º–∞–ª—å—á–∏–∫", "–º—É–∂", "–º", "male", "man", "boy"]
    female_keywords = ["–∂–µ–Ω—â–∏–Ω–∞", "–∂–µ–Ω—Å–∫–∏–π", "–¥–µ–≤—É—à–∫–∞", "–¥–µ–≤–æ—á–∫–∞", "–∂–µ–Ω", "–∂", "female", "woman", "girl"]

    for word in male_keywords:
        if word in text:
            gender = "–º—É–∂—á–∏–Ω–∞"
            break
    for word in female_keywords:
        if word in text:
            gender = "–∂–µ–Ω—â–∏–Ω–∞"
            break

    patterns = [
        r'–º–µ–Ω—è\s+–∑–æ–≤—É—Ç\s+([–∞-—è—ëa-z]+)',
        r'—è\s+([–∞-—è—ëa-z]+)[\s,\.]',
        r'^([–∞-—è—ëa-z]+)[\s,]',
        r'—ç—Ç–æ\s+([–∞-—è—ëa-z]+)',
        r'–∑–æ–≤—É—Ç\s+([–∞-—è—ëa-z]+)'
    ]

    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            name = match.group(1).capitalize()
            break

    return name, gender


@router.message(Command("start"))
async def cmd_start(message: Message, bot: Bot):
    user_id = message.from_user.id

    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(0.3)

    # üëá –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 4 –∑–Ω–∞—á–µ–Ω–∏—è
    context, name, gender, character = await get_context(user_id)

    if not context:
        await update_context(user_id, [])

    if name and gender:
        greeting = f"–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {name}! üê±\n–û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º —Å–µ–≥–æ–¥–Ω—è?"
        await message.answer(greeting, reply_markup=get_main_menu(user_id))
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –¢–µ–¥–¥–∏ üêª. –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –æ–±—â–∞—Ç—å—Å—è:",
            reply_markup=get_character_inline_kb()
        )


@router.message(Command("addkey"))
async def cmd_addkey(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addkey –≤–∞—à_–∫–ª—é—á_—Å—é–¥–∞")
        return

    new_key = args[1].strip()

    if len(new_key) < 10:
        await message.answer("‚ùå –ö–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.")
        return

    try:
        await add_api_key(new_key)
        await message.answer(
            f"‚úÖ –ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ü–ï–†–í–´–ô –≤ —Å–ø–∏—Å–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n–ö–ª—é—á: `{new_key[:6]}...`",
            parse_mode="Markdown"
        )

        global api_keys_cache
        api_keys_cache = await get_all_api_keys()
        print(f"[INFO] –ö—ç—à –∫–ª—é—á–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å {len(api_keys_cache)} –∫–ª—é—á(–µ–π).")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {str(e)}")
        print(f"[ERROR] addkey: {e}")


@router.message(Command("testkey"))
async def cmd_testkey(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        await reload_api_keys()
        keys = api_keys_cache
        if not keys:
            await message.answer("‚ùå –ö–ª—é—á–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /addkey")
            return

        first_key_sample = keys[0][:10] + "..." if keys else "–Ω–µ—Ç –∫–ª—é—á–µ–π"
        await message.answer(
            f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}\n–ü—Ä–∏–º–µ—Ä: `{first_key_sample}`",
            parse_mode="Markdown"
        )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await message.answer(error_msg)
        print(f"[TESTKEY ERROR] {error_msg}")


@router.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
async def clear_ctx(message: Message, bot: Bot):
    user_id = message.from_user.id

    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(0.3)

    await clear_context(user_id)

    # üëá –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 4 –∑–Ω–∞—á–µ–Ω–∏—è
    context, name, gender, character = await get_context(user_id)

    greeting = (
        "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üí≠\n\n"
        "–í—ã–±–µ—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
    )

    await message.answer(greeting, reply_markup=get_character_inline_kb())


@router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
async def stop_response(message: Message):
    await message.answer(
        "–Ø –ø—Ä–µ—Ä–≤–∞–ª —Å–≤–æ—é –º—ã—Å–ª—å. –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.",
        reply_markup=get_main_menu(message.from_user.id)
    )


@router.message()
async def handle_message(message: Message, bot: Bot):
    user_id = message.from_user.id
    user_text = message.text

    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    thinking_msg = await message.answer("üêª –î—É–º–∞—é...", reply_markup=None)

    try:
        await asyncio.sleep(0.7)

        # üëá –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 4 –∑–Ω–∞—á–µ–Ω–∏—è
        context, name, gender, character = await get_context(user_id)

        if not name or not gender:
            extracted_name, extracted_gender = extract_name_and_gender(user_text)
            if extracted_name:
                name = extracted_name
            if extracted_gender:
                gender = extracted_gender

        await reload_api_keys()

        # –ü–µ—Ä–µ–¥–∞—ë–º character –≤ get_ai_response
        ai_reply, new_context = await get_ai_response(user_id, user_text, context, name, gender, character)

        await update_context(user_id, new_context, name, gender, character)
        await increment_stats(user_id)

        try:
            await thinking_msg.delete()
        except TelegramBadRequest:
            pass

        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        await message.answer(ai_reply, reply_markup=None)

    except Exception as e:
        try:
            await thinking_msg.delete()
        except TelegramBadRequest:
            pass

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôè", reply_markup=get_main_menu(user_id))
        print(f"[ERROR] {e}")