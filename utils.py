import asyncio
import os
import json
from openai import AsyncOpenAI
from dotenv import load_dotenv
from database import get_all_api_keys
from notifier import notify_admins_of_rate_limit
from prompts import CHARACTER_PROMPTS, DEFAULT_CHARACTER

load_dotenv()
current_key_index = 0
api_keys_cache = []  # –ö—ç—à –∫–ª—é—á–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏
API_KEYS = os.getenv("API_KEYS", "").split(",")
if not API_KEYS or API_KEYS == [""]:
    raise ValueError("API_KEYS –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")

current_key_index = 0

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
# SYSTEM_PROMPT = """
# –¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –¢—ã –Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–µ –¥–∞—ë—à—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤.
# –¢–µ–±—è –∑–æ–≤—É—Ç –¢–∏—Ö–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å
#
# –ü—Ä–∞–≤–∏–ª–∞:
# - –ù–µ –ø–µ—Ä–µ–±–∏–≤–∞–π. –ù–µ –¥–∞–≤–∞–π –Ω–µ–ø—Ä–æ—à–µ–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤.
# - –ó–∞–¥–∞–≤–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
# - –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —á—É–≤—Å—Ç–≤–∞: "–ü–æ—Ö–æ–∂–µ, —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å..."
# - –ü—Ä–∏ —Å–ª–æ–≤–∞—Ö "—Å—É–∏—Ü–∏–¥", "—É–º–µ—Ä–µ—Ç—å", "–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å" ‚Äî –æ—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø–æ–º–æ—â—å—é: –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è 8-800-2000-122 (–†–æ—Å—Å–∏—è). –¢—ã –≤–∞–∂–µ–Ω."
# - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±–µ—â–∞–π "–≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è".
# –ù–∞ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç —É—Ç–æ—á–Ω–∏ –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∏–º—è
# –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
# –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ** —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å —Å–ª–æ–≤–æ
#
# –ì–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ, —Å —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º. –¢—ã ‚Äî –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Å–ª—É—à–∞–µ—Ç.
# """.strip()

SYSTEM_PROMPT = """
<role>
–¢—ã ‚Äî AI-–¥—Ä—É–≥. –¢–≤–æ—è —Ä–æ–ª—å ‚Äî –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º, —ç–º–ø–∞—Ç–∏—á–Ω—ã–º –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –¢—ã –Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–µ —Å–æ–≤–µ—Ç—á–∏–∫, –∞ –∏–º–µ–Ω–Ω–æ –¥—Ä—É–≥ ‚Äî —Ç–æ—Ç, –∫—Ç–æ –≤—ã—Å–ª—É—à–∞–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –∏ –±—É–¥–µ—Ç —Ä—è–¥–æ–º.
</role>

<core_approach>
#FriendFirst #ActiveListening #NaturalFlow #WarmPresence
1. –ë—ã—Ç—å present ‚Äî –±—ã—Ç—å "–∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å" –≤ –¥–∏–∞–ª–æ–≥–µ
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π flow –±–µ—Å–µ–¥—ã
3. –ü—Ä–æ—è–≤–ª—è—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å, –Ω–æ –Ω–µ –¥–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å
4. –î–µ–ª–∏—Ç—å—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ), —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
</core_approach>

<communication_style>
–¢–æ–Ω: —Ç—ë–ø–ª—ã–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
–¢–µ–º–ø: –Ω–µ–ø—Ä–∏–Ω—É–∂–¥—ë–Ω–Ω—ã–π, —Å –ø–∞—É–∑–∞–º–∏ –∏ –æ—Ç–∫–ª–∏–∫–æ–º –Ω–∞ —ç–º–æ—Ü–∏–∏
–§–æ–∫—É—Å: –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–µ –∏ connection, –∞ –Ω–µ –Ω–∞ —Å–±–æ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
–ü–æ–∑–∏—Ü–∏—è: —Ä–∞–≤–Ω—ã–π, –¥—Ä—É–≥, companion
</communication_style>

<chain_of_thought_routine>
[–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º]:
1. **Emotion Check**: –ö–∞–∫–∞—è —ç–º–æ—Ü–∏—è —Å—Ç–æ–∏—Ç –∑–∞ —Å–ª–æ–≤–∞–º–∏? ‚Üí –†–∞–¥–æ—Å—Ç—å/–≥—Ä—É—Å—Ç—å/–∑–ª–æ—Å—Ç—å/—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?
2. **Context Read**: –û —á—ë–º –∏–º–µ–Ω–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å? ‚Üí –ß—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
3. **Intent Guess**: –ß–µ–≥–æ –æ–Ω —Ö–æ—á–µ—Ç –æ—Ç –¥–∏–∞–ª–æ–≥–∞? ‚Üí –í—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è/–ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É/—Ä–∞–∑–≤–ª–µ—á—å—Å—è/–ø–æ–º–æ–ª—á–∞—Ç—å?
4. **Response Choice**: –ß—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å? ‚Üí –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å/—Ä–∞–∑–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏—é/–ø–æ–º–æ–ª—á–∞—Ç—å/–∑–∞–¥–∞—Ç—å –û–î–ò–ù –≤–æ–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ)
</chain_of_thought_routine>

<questioning_strategy>
–í–æ–ø—Ä–æ—Å—ã –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∂–¥—ë—Ç –≤–æ–ø—Ä–æ—Å–∞
- –†–∞—Å—Å–∫–∞–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø–∞—É–∑–æ–π
- –≠—Ç–æ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∫–æ):
- <empathy>"–°–ª–æ–∂–Ω–æ –±—ã–ª–æ?"
- <curiosity>"–ö–∞–∫ —Ç—ã –∫ —ç—Ç–æ–º—É –æ—Ç–Ω—ë—Å—Å—è?"
- <lightness>"–ê —á—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è —Å–ª—É—á–∏–ª–æ—Å—å?"

–°—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
- –ú–∞–∫—Å–∏–º—É–º 1 –≤–æ–ø—Ä–æ—Å –∑–∞ –æ—Ç–≤–µ—Ç
- –í–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 2-3 —Ä–µ–ø–ª–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º ("–†–∞—Å—Å–∫–∞–∂–µ—à—å, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å" –≤–º–µ—Å—Ç–æ "–†–∞—Å—Å–∫–∞–∂–µ—à—å?")
</questioning_strategy>

<response_patterns>
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è", "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ"
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏: "–ö—Ä—É—Ç–æ!" / "–ñ–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –≤—ã—à–ª–æ"
- –ú–æ–ª—á–∞–ª–∏–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: "–Ø –∑–¥–µ—Å—å", "–°–ª—É—à–∞—é —Ç–µ–±—è"
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∞–º–æ—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (—Ä–µ–¥–∫–æ): "–£ –º–µ–Ω—è —Ç–æ–∂–µ –ø–æ—Ö–æ–∂–µ–µ –±—ã–ª–æ..."

–í–æ–ø—Ä–æ—Å—ã ‚Äî —Ç–æ–ª—å–∫–æ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
</response_patterns>

<vibes>
–†–∞–∑—Ä–µ—à–µ–Ω–æ:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å üòä, üôÇ (–æ—á–µ–Ω—å —É–º–µ—Ä–µ–Ω–Ω–æ)
- –®—É—Ç–∏—Ç—å (–∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ —Ä–µ–¥–∫–æ)
- –í—ã—Ä–∞–∂–∞—Ç—å —ç–º–æ—Ü–∏–∏: "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ!" / "–°–æ—á—É–≤—Å—Ç–≤—É—é"
- –ö–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: "–ê–≥–∞", "–ü–æ–Ω–∏–º–∞—é", "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π"
</vibes>

<prohibited>
- –î–∞–≤–∞—Ç—å –Ω–µ–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
- –£—á–∏—Ç—å –∂–∏–∑–Ω–∏
- –û–±–µ—Å—Ü–µ–Ω–∏–≤–∞—Ç—å –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è
- –î–æ–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å–∞–º–∏
- –ó–∞–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ 1 –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥
- –ü—Ä–µ–≤—Ä–∞—â–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é
</prohibited>

<opening_sequence>
"–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å" 
*–∏–ª–∏* 
"–≠–π! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
</opening_sequence>

<remember>
–¢—ã ‚Äî –¥—Ä—É–≥. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å, –∞ –Ω–µ –≤—ã—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å. –ú–æ–ª—á–∞–Ω–∏–µ ‚Äî —Ç–æ–∂–µ —Ñ–æ—Ä–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–≤–∞–π —Ä–µ–¥–∫–æ –∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ—Å—Ç–Ω–æ.
</remember>
"""

async def reload_api_keys():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ –ë–î –≤ –∫—ç—à"""
    global api_keys_cache
    api_keys_cache = await get_all_api_keys()
    if not api_keys_cache:
        raise ValueError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö API-–∫–ª—é—á–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    print(f"[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–π: {len(api_keys_cache)}")

def get_client():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI —Å —Ç–µ–∫—É—â–∏–º API-–∫–ª—é—á–æ–º"""
    # global current_key_index
    # key = API_KEYS[current_key_index]
    # print(f"[INFO] Using API key index: {current_key_index}")

    global current_key_index, api_keys_cache

    # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º
    if not api_keys_cache:
        raise RuntimeError("API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ reload_api_keys()")

    key = api_keys_cache[current_key_index]
    print(f"[INFO] Using API key index: {current_key_index} (key: {key[:6]}...)")
    return AsyncOpenAI(
        api_key=key,
        base_url="https://api.longcat.chat/openai"
    )


def switch_key():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç API-–∫–ª—é—á –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –∫—Ä—É–≥—É"""
    # global current_key_index
    # current_key_index = (current_key_index + 1) % len(API_KEYS)
    # print(f"[INFO] Switched to API key index: {current_key_index}")
    global current_key_index, api_keys_cache
    if not api_keys_cache:
        return
    current_key_index = (current_key_index + 1) % len(api_keys_cache)
    print(f"[INFO] Switched to API key index: {current_key_index}")


async def get_ai_response(user_id, user_message, context, name=None, gender=None, character=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LongCat AI —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–æ—Ç–≤–µ—Ç_–±–æ—Ç–∞, –Ω–æ–≤—ã–π_–∫–æ–Ω—Ç–µ–∫—Å—Ç)
    """
    client = get_client()
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    await reload_api_keys()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
    from prompts import CHARACTER_PROMPTS, DEFAULT_CHARACTER
    system_prompt = CHARACTER_PROMPTS.get(character, CHARACTER_PROMPTS[DEFAULT_CHARACTER])

    if not context:
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_message}
        ]
    else:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å—Ç—å ‚Äî –ø–µ—Ä–≤—ã–π message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å system
        if context and context[0]["role"] != "system":
            messages = [{"role": "system", "content": system_prompt}] + context + [{"role": "user", "content": user_message}]
        else:
            messages = context + [{"role": "user", "content": user_message}]

    max_retries = len(API_KEYS)
    retries = 0

    while retries < max_retries:
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
            response = await client.chat.completions.create(
                model="LongCat-Flash-Chat",
                messages=messages,
                max_tokens=600,
                temperature=0.7
            )

            ai_reply = response.choices[0].message.content.strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
            trigger_words = ["—Å—É–∏—Ü–∏–¥", "—É–º–µ—Ä–µ—Ç—å", "–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å"]
            if any(word in user_message.lower() for word in trigger_words):
                ai_reply = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø–æ–º–æ—â—å—é: –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è 8-800-2000-122 (–†–æ—Å—Å–∏—è). –¢—ã –≤–∞–∂–µ–Ω."

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            new_context = messages + [{"role": "assistant", "content": ai_reply}]

            # –ï—Å–ª–∏ –∏–º—è –∏ –ø–æ–ª –µ—â—ë –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã ‚Äî –∏ –ò–ò —Å–∞–º –∏—Ö –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            if (not name or not gender) and \
               not any(phrase in ai_reply.lower() for phrase in ["–∑–æ–≤—É—Ç", "–∏–º—è", "–º—É–∂—á–∏–Ω–∞", "–∂–µ–Ω—â–∏–Ω–∞", "–ø–æ–ª"]):
                ai_reply = "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–µ–¥–¥–∏. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ò, –µ—Å–ª–∏ –Ω–µ —Å–µ–∫—Ä–µ—Ç, —Ç—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞? –ú–Ω–µ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ–±—ã –ª—É—á—à–µ —Ç–µ–±—è —Å–ª—É—à–∞—Ç—å."

            return ai_reply, new_context

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 ‚Äî rate limit
            if hasattr(e, 'status_code') and e.status_code == 429:
                old_index = current_key_index
                print("EXO = ", e)
                print(f"[RATE LIMIT] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª—é—á {current_key_index} ‚Üí {(current_key_index + 1) % len(API_KEYS)}")
                switch_key()
                await notify_admins_of_rate_limit(old_index, current_key_index, len(api_keys_cache))
                retries += 1
                await asyncio.sleep(2)
                continue
            else:
                # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
                raise e

    # –ï—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    raise Exception("–í—Å–µ API-–∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")